1. ROUND_UP: 始终对非零舍弃部分前面的数字绝对值加 1
输入数字	使用 UP 舍入模式将输入数字舍入为一位数
5.5	     6
2.5	     3
1.6	     2
1.1	     2
1.0	     1
-1.0	-1
-1.1	-2
-1.6	-2
-2.5	-3
-5.5	-6

2. ROUND_DOWN: 截尾
输入数字	使用 DOWN 舍入模式将输入数字舍入为一位数
5.5	     5
2.5	     2
1.6	     1
1.1	     1
1.0	     1
-1.0	-1
-1.1	-1
-1.6	-1
-2.5	-2
-5.5	-5

3. CEILING: 如果结果为正，则舍入行为类似于 RoundingMode.UP；如果结果为负，则舍入行为类似于RoundingMode.DOWN。注意，此舍入模式始终不会减少计算值。
输入数字	使用 CEILING 舍入模式将输入数字舍入为一位数
5.5	     6
2.5	     3
1.6	     2
1.1	     2
1.0	     1
-1.0	-1
-1.1	-1
-1.6	-1
-2.5	-2
-5.5	-5

4. FLOOR: 如果结果为正，则舍入行为类似于 RoundingMode.DOWN；如果结果为负，则舍入行为类似于RoundingMode.UP。注意，此舍入模式始终不会增加计算值。
输入数字	使用 FLOOR 舍入模式将输入数字舍入为一位数
5.5	     5
2.5	     2
1.6	     1
1.1	     1
1.0	     1
-1.0	-1
-1.1	-2
-1.6	-2
-2.5	-3
-5.5	-6

5. HALF_UP: 如果被舍弃部分 >= 0.5，则舍入行为同 RoundingMode.UP；否则舍入行为同RoundingMode.DOWN。注意，此舍入模式就是通常学校里讲的四舍五入。
输入数字	使用 HALF_UP 舍入模式将输入数字舍入为一位数
5.5	     6
2.5	     3
1.6	     2
1.1	     1
1.0	     1
-1.0	-1
-1.1	-1
-1.6	-2
-2.5	-3
-5.5	-6

6. HALF_DOWN: 如果被舍弃部分 > 0.5，则舍入行为同 RoundingMode.UP；否则舍入行为同RoundingMode.DOWN。注意，此舍入模式就是通常讲的五舍六入。
输入数字	使用 HALF_DOWN 舍入模式将输入数字舍入为一位数
5.5	     5
2.5	     2
1.6	     2
1.1	     1
1.0	     1
-1.0	-1
-1.1	-1
-1.6	-2
-2.5	-2
-5.5	-5

7. HALF_EVEN: 如果舍弃部分左边的数字为奇数，则舍入行为同 RoundingMode.HALF_UP；如果为偶数，则舍入行为同RoundingMode.HALF_DOWN。注意，在重复进行一系列计算时，根据统计学，此舍入模式可以在统计上将累加错误减到最小。此舍入模式也称为“银行家舍入法”，主要在美国使用。此舍入模式类似于 Java 中对float 和double 算法使用的舍入策略。
输入数字	使用 HALF_EVEN 舍入模式将输入数字舍入为一位数
5.5	     6
2.5	     2
1.6	     2
1.1	     1
1.0	     1
-1.0	-1
-1.1	-1
-1.6	-2
-2.5	-2
-5.5	-6

8. UNNECESSARY: 计算结果是精确的，不需要舍入，否则抛出 ArithmeticException。
输入数字	使用 UNNECESSARY 舍入模式将输入数字舍入为一位数
5.5	    抛出 ArithmeticException
2.5	    抛出 ArithmeticException
1.6	    抛出 ArithmeticException
1.1	    抛出 ArithmeticException
1.0	    1
-1.0	-1
-1.1	抛出 ArithmeticException
-1.6	抛出 ArithmeticException
-2.5	抛出 ArithmeticException
-5.5	抛出 ArithmeticException