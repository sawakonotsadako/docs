JDK动态代理只能针对实现了接口的类进行代理，而不能针对类
CGLib是针对类实现代理，对指定的类生成一个子类，并覆盖其中的方法（继承）

1.JDK动态代理
实现写法一
public class MainTest {
    public static void main(String[] args) {
        //目标对象
        TargetObject target = new TargetObject();
        //拦截器
        MyInterceptor myInterceptor = new MyInterceptor(target);
 
        /*
         *  Proxy.newProxyInstance参数：
         * 	1、目标类的类加载器
         * 	2、目标类的所有的接口
         *  3、拦截器
         */
        //代理对象，调用系统方法自动生成
        TargetInterface proxyObj = (TargetInterface) Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), myInterceptor);
        proxyObj.business();
    }
}
/**
 * 目标接口：
 * 包含目标方法的声明
 */
public interface TargetInterface {
    /**
     * 目标方法
     */
    void business();
}
/**
 * 被代理的类
 * 目标对象类
 * 实现目标接口.
 * 继而实现目标方法。
 */
public class MyInterceptor implements InvocationHandler {
    private Object target;//目标类
 
    public MyInterceptor(Object target) {
        this.target = target;
    }
 
    /**
     * args 目标方法的参数
     * method 目标方法
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("aaaaa");//切面方法a();
        //。。。
        method.invoke(this.target, args);//调用目标类的目标方法
        //。。。
        System.out.println("bbbbb");//切面方法f();
        return null;
    }
}

实现写法二
public class ProxyTest {
    public static void main(String[] args) {
        UserDao userDao = new UserDaoImpl();
        UserDao userDao2 = new UserDaoImpl2();

        UserDao userDaoProxy = (UserDao) new ProxyFactory(userDao2).getProxyInstance();
        userDaoProxy.save();

        /*UserDao userDaoProxy2 = (UserDao) new ProxyFactory(userDao2).getProxyInstance();
        userDaoProxy2.save();*/

    }
}
public class ProxyFactory {
    private Object target;

    public ProxyFactory(Object target) {
        this.target = target;
    }
    public Object getProxyInstance() {

        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InvocationHandler() {
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                System.out.println("Method:"+ method.getName());
                System.out.println("args:"+ args);
                System.out.println("proxy:"+proxy.getClass());
                System.out.println("开始任务2");


                Object returnedValue = method.invoke(target,args);



                System.out.println("结束任务2");
                return returnedValue;
            }
        });
    }
}
//用户接口
public interface UserDao {
    void save();

    void query();
}
//用户接口实现一
public class UserDaoImpl implements UserDao {
    @Override
    public void save() {
        System.out.println("user dao 1 save process is going on");
    }

    @Override
    public void query() {
        System.out.println("user dao 1 query process is going on");
    }
}
//用户接口实现二
public class UserDaoImpl2 implements UserDao {
    @Override
    public void save() {
        System.out.println("user dao impl 2 save process is going on");
    }

    @Override
    public void query() {
        System.out.println("user dao impl 2 query process is going on");
    }
}

2.CGLib动态代理
/**
 * 被代理的类
 * 目标对象类
 */
public class TargetObject {
 
    /**
     * 目标方法(即目标操作)
     */
    public void business() {
        System.out.println("business");
    }
 
}
/**
 * 动态代理-拦截器
 * <p>
 * Created by lxk on 2016/11/25
 */
public class MyInterceptor implements MethodInterceptor {
    private Object target;//目标类
 
    public MyInterceptor(Object target) {
        this.target = target;
    }
 
    /**
     * 返回代理对象
     * 具体实现，暂时先不追究。
     */
    public Object createProxy() {
        Enhancer enhancer = new Enhancer();
        enhancer.setCallback(this);//回调函数  拦截器
        //设置代理对象的父类,可以看到代理对象是目标对象的子类。所以这个接口类就可以省略了。
        enhancer.setSuperclass(this.target.getClass());
        return enhancer.create();
    }
 
    /**
     * args 目标方法的参数
     * method 目标方法
     */
    @Override
    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
        System.out.println("aaaaa");//切面方法a();
        //。。。
        method.invoke(this.target, objects);//调用目标类的目标方法
        //。。。
        System.out.println("bbbbb");//切面方法f();
        return null;
    }
}

public class MainTest {
    public static void main(String[] args) {
        //目标对象
        TargetObject target = new TargetObject();
        //拦截器
        MyInterceptor myInterceptor = new MyInterceptor(target);
        //代理对象，调用cglib系统方法自动生成
        //注意：代理类是目标类的子类。
        TargetObject proxyObj = (TargetObject) myInterceptor.createProxy();
        proxyObj.business();
    }
}
结论：
动态代理分为两种：
      *  jdk的动态代理
         *  代理对象和目标对象实现了共同的接口
         *  拦截器必须实现InvocationHanlder接口
 
      *  cglib的动态代理
         *  代理对象是目标对象的子类
         *  拦截器必须实现MethodInterceptor接口
         *  hibernate中session.load采用的是cglib实现的



